# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, prod_id: int=None, brand: str=None, name: str=None, stock: int=None, price: float=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param prod_id: The prod_id of this Product.  # noqa: E501
        :type prod_id: int
        :param brand: The brand of this Product.  # noqa: E501
        :type brand: str
        :param name: The name of this Product.  # noqa: E501
        :type name: str
        :param stock: The stock of this Product.  # noqa: E501
        :type stock: int
        :param price: The price of this Product.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'prod_id': int,
            'brand': str,
            'name': str,
            'stock': int,
            'price': float
        }

        self.attribute_map = {
            'prod_id': 'prodID',
            'brand': 'brand',
            'name': 'name',
            'stock': 'stock',
            'price': 'price'
        }

        self._prod_id = prod_id
        self._brand = brand
        self._name = name
        self._stock = stock
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prod_id(self) -> int:
        """Gets the prod_id of this Product.


        :return: The prod_id of this Product.
        :rtype: int
        """
        return self._prod_id

    @prod_id.setter
    def prod_id(self, prod_id: int):
        """Sets the prod_id of this Product.


        :param prod_id: The prod_id of this Product.
        :type prod_id: int
        """

        self._prod_id = prod_id

    @property
    def brand(self) -> str:
        """Gets the brand of this Product.


        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand: str):
        """Sets the brand of this Product.


        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def name(self) -> str:
        """Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Product.


        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def stock(self) -> int:
        """Gets the stock of this Product.


        :return: The stock of this Product.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock: int):
        """Sets the stock of this Product.


        :param stock: The stock of this Product.
        :type stock: int
        """

        self._stock = stock

    @property
    def price(self) -> float:
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: float
        """

        self._price = price
